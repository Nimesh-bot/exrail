// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/expenses.dart';
import 'model/income.dart';
import 'model/otp.dart';
import 'model/users.dart';
import 'model/wish.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 1246211299719964484),
      name: 'Expenses',
      lastPropertyId: const IdUid(12, 7774334241951962374),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1908047360475861357),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3700924521704495524),
            name: 'expenseId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 4535446145166243835)),
        ModelProperty(
            id: const IdUid(3, 2936144022076002515),
            name: 'food',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4123742676484320470),
            name: 'transport',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6270769258036080969),
            name: 'expected',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4667935168126801061),
            name: 'uncertain',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3757094001556035169),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1733212379322477966),
            name: 'year',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7846808640369760948),
            name: 'month',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7651170465843969915),
            name: 'estimated_food',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1292017716727672654),
            name: 'estimated_transport',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7774334241951962374),
            name: 'estimated_expected',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 8268524766577584768),
      name: 'OTP',
      lastPropertyId: const IdUid(5, 24705785213522336),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5465400691228074686),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2651490931536690860),
            name: 'otpId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 8709697004003322929)),
        ModelProperty(
            id: const IdUid(3, 1426583379881222143),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4679501923808809425),
            name: 'otp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 24705785213522336),
            name: 'expiresAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 3957829695602115159),
      name: 'Income',
      lastPropertyId: const IdUid(8, 1372221257313758298),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9043589308453098902),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 4042944824521462664),
            name: 'incomeId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 9066172443207902225)),
        ModelProperty(
            id: const IdUid(3, 8589711335990576811),
            name: 'monthlySalary',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1511100741099069657),
            name: 'estimatedSaving',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5722620694610787761),
            name: 'receiveDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8747917322378452588),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4578612901466182680),
            name: 'year',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1372221257313758298),
            name: 'month',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 512486545301197468),
      name: 'Wish',
      lastPropertyId: const IdUid(7, 8372963142325931894),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8204230064788678618),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 8023054580872445369),
            name: 'wishId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 7897033372147528656)),
        ModelProperty(
            id: const IdUid(3, 5337462218110525131),
            name: 'productName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7593926737592337379),
            name: 'price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7969060332784905182),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8372963142325931894),
            name: 'image',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 112631275341158142),
      name: 'Users',
      lastPropertyId: const IdUid(8, 8826488090352001142),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4503435957185741963),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 4680398550523197523),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8968637900922671724),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 725962513012578890),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1239100124702782744),
            name: 'role',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5752563877076135805),
            name: 'isVerified',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1298094925691976466),
            name: 'passResetVerified',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8826488090352001142),
            name: 'userId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(7, 2453311693882896323))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 112631275341158142),
      lastIndexId: const IdUid(7, 2453311693882896323),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [8426906784206537814],
      retiredIndexUids: const [1796845095353120636],
      retiredPropertyUids: const [
        7899744946703322261,
        3471470547661713189,
        630407225917801177,
        832673252526150229,
        240404487109449340,
        1727397078714979473,
        7896854558620031219,
        1830182421356607839
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Expenses: EntityDefinition<Expenses>(
        model: _entities[0],
        toOneRelations: (Expenses object) => [],
        toManyRelations: (Expenses object) => {},
        getId: (Expenses object) => object.id,
        setId: (Expenses object, int id) {
          object.id = id;
        },
        objectToFB: (Expenses object, fb.Builder fbb) {
          final expenseIdOffset = object.expenseId == null
              ? null
              : fbb.writeString(object.expenseId!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, expenseIdOffset);
          fbb.addInt64(2, object.food);
          fbb.addInt64(3, object.transport);
          fbb.addInt64(4, object.expected);
          fbb.addInt64(5, object.uncertain);
          fbb.addOffset(6, userIdOffset);
          fbb.addInt64(7, object.year);
          fbb.addInt64(8, object.month);
          fbb.addInt64(9, object.estimated_food);
          fbb.addInt64(10, object.estimated_transport);
          fbb.addInt64(11, object.estimated_expected);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Expenses(
              expenseId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              food: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              transport: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              expected: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              uncertain: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              estimated_food: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 22),
              estimated_transport: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 24),
              estimated_expected: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 26),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              year:
                  const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18),
              month: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    OTP: EntityDefinition<OTP>(
        model: _entities[1],
        toOneRelations: (OTP object) => [],
        toManyRelations: (OTP object) => {},
        getId: (OTP object) => object.id,
        setId: (OTP object, int id) {
          object.id = id;
        },
        objectToFB: (OTP object, fb.Builder fbb) {
          final otpIdOffset =
              object.otpId == null ? null : fbb.writeString(object.otpId!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final otpOffset =
              object.otp == null ? null : fbb.writeString(object.otp!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, otpIdOffset);
          fbb.addOffset(2, userIdOffset);
          fbb.addOffset(3, otpOffset);
          fbb.addInt64(4, object.expiresAt?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final expiresAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = OTP(
              otpId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              otp: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              expiresAt: expiresAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(expiresAtValue),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    Income: EntityDefinition<Income>(
        model: _entities[2],
        toOneRelations: (Income object) => [],
        toManyRelations: (Income object) => {},
        getId: (Income object) => object.id,
        setId: (Income object, int id) {
          object.id = id;
        },
        objectToFB: (Income object, fb.Builder fbb) {
          final incomeIdOffset = object.incomeId == null
              ? null
              : fbb.writeString(object.incomeId!);
          final receiveDateOffset = object.receiveDate == null
              ? null
              : fbb.writeString(object.receiveDate!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, incomeIdOffset);
          fbb.addInt64(2, object.monthlySalary);
          fbb.addInt64(3, object.estimatedSaving);
          fbb.addOffset(4, receiveDateOffset);
          fbb.addOffset(5, userIdOffset);
          fbb.addInt64(6, object.year);
          fbb.addInt64(7, object.month);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Income(
              incomeId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              monthlySalary: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              estimatedSaving: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              receiveDate: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              year: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              month: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    Wish: EntityDefinition<Wish>(
        model: _entities[3],
        toOneRelations: (Wish object) => [],
        toManyRelations: (Wish object) => {},
        getId: (Wish object) => object.id,
        setId: (Wish object, int id) {
          object.id = id;
        },
        objectToFB: (Wish object, fb.Builder fbb) {
          final wishIdOffset =
              object.wishId == null ? null : fbb.writeString(object.wishId!);
          final productNameOffset = object.productName == null
              ? null
              : fbb.writeString(object.productName!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, wishIdOffset);
          fbb.addOffset(2, productNameOffset);
          fbb.addInt64(3, object.price);
          fbb.addOffset(5, userIdOffset);
          fbb.addOffset(6, imageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Wish(
              wishId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              productName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              price: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    Users: EntityDefinition<Users>(
        model: _entities[4],
        toOneRelations: (Users object) => [],
        toManyRelations: (Users object) => {},
        getId: (Users object) => object.id,
        setId: (Users object, int id) {
          object.id = id;
        },
        objectToFB: (Users object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final roleOffset =
              object.role == null ? null : fbb.writeString(object.role!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, roleOffset);
          fbb.addBool(5, object.isVerified);
          fbb.addBool(6, object.passResetVerified);
          fbb.addOffset(7, userIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Users(
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              role: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              isVerified: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              passResetVerified: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Expenses] entity fields to define ObjectBox queries.
class Expenses_ {
  /// see [Expenses.id]
  static final id = QueryIntegerProperty<Expenses>(_entities[0].properties[0]);

  /// see [Expenses.expenseId]
  static final expenseId =
      QueryStringProperty<Expenses>(_entities[0].properties[1]);

  /// see [Expenses.food]
  static final food =
      QueryIntegerProperty<Expenses>(_entities[0].properties[2]);

  /// see [Expenses.transport]
  static final transport =
      QueryIntegerProperty<Expenses>(_entities[0].properties[3]);

  /// see [Expenses.expected]
  static final expected =
      QueryIntegerProperty<Expenses>(_entities[0].properties[4]);

  /// see [Expenses.uncertain]
  static final uncertain =
      QueryIntegerProperty<Expenses>(_entities[0].properties[5]);

  /// see [Expenses.userId]
  static final userId =
      QueryStringProperty<Expenses>(_entities[0].properties[6]);

  /// see [Expenses.year]
  static final year =
      QueryIntegerProperty<Expenses>(_entities[0].properties[7]);

  /// see [Expenses.month]
  static final month =
      QueryIntegerProperty<Expenses>(_entities[0].properties[8]);

  /// see [Expenses.estimated_food]
  static final estimated_food =
      QueryIntegerProperty<Expenses>(_entities[0].properties[9]);

  /// see [Expenses.estimated_transport]
  static final estimated_transport =
      QueryIntegerProperty<Expenses>(_entities[0].properties[10]);

  /// see [Expenses.estimated_expected]
  static final estimated_expected =
      QueryIntegerProperty<Expenses>(_entities[0].properties[11]);
}

/// [OTP] entity fields to define ObjectBox queries.
class OTP_ {
  /// see [OTP.id]
  static final id = QueryIntegerProperty<OTP>(_entities[1].properties[0]);

  /// see [OTP.otpId]
  static final otpId = QueryStringProperty<OTP>(_entities[1].properties[1]);

  /// see [OTP.userId]
  static final userId = QueryStringProperty<OTP>(_entities[1].properties[2]);

  /// see [OTP.otp]
  static final otp = QueryStringProperty<OTP>(_entities[1].properties[3]);

  /// see [OTP.expiresAt]
  static final expiresAt =
      QueryIntegerProperty<OTP>(_entities[1].properties[4]);
}

/// [Income] entity fields to define ObjectBox queries.
class Income_ {
  /// see [Income.id]
  static final id = QueryIntegerProperty<Income>(_entities[2].properties[0]);

  /// see [Income.incomeId]
  static final incomeId =
      QueryStringProperty<Income>(_entities[2].properties[1]);

  /// see [Income.monthlySalary]
  static final monthlySalary =
      QueryIntegerProperty<Income>(_entities[2].properties[2]);

  /// see [Income.estimatedSaving]
  static final estimatedSaving =
      QueryIntegerProperty<Income>(_entities[2].properties[3]);

  /// see [Income.receiveDate]
  static final receiveDate =
      QueryStringProperty<Income>(_entities[2].properties[4]);

  /// see [Income.userId]
  static final userId = QueryStringProperty<Income>(_entities[2].properties[5]);

  /// see [Income.year]
  static final year = QueryIntegerProperty<Income>(_entities[2].properties[6]);

  /// see [Income.month]
  static final month = QueryIntegerProperty<Income>(_entities[2].properties[7]);
}

/// [Wish] entity fields to define ObjectBox queries.
class Wish_ {
  /// see [Wish.id]
  static final id = QueryIntegerProperty<Wish>(_entities[3].properties[0]);

  /// see [Wish.wishId]
  static final wishId = QueryStringProperty<Wish>(_entities[3].properties[1]);

  /// see [Wish.productName]
  static final productName =
      QueryStringProperty<Wish>(_entities[3].properties[2]);

  /// see [Wish.price]
  static final price = QueryIntegerProperty<Wish>(_entities[3].properties[3]);

  /// see [Wish.userId]
  static final userId = QueryStringProperty<Wish>(_entities[3].properties[4]);

  /// see [Wish.image]
  static final image = QueryStringProperty<Wish>(_entities[3].properties[5]);
}

/// [Users] entity fields to define ObjectBox queries.
class Users_ {
  /// see [Users.id]
  static final id = QueryIntegerProperty<Users>(_entities[4].properties[0]);

  /// see [Users.name]
  static final name = QueryStringProperty<Users>(_entities[4].properties[1]);

  /// see [Users.email]
  static final email = QueryStringProperty<Users>(_entities[4].properties[2]);

  /// see [Users.password]
  static final password =
      QueryStringProperty<Users>(_entities[4].properties[3]);

  /// see [Users.role]
  static final role = QueryStringProperty<Users>(_entities[4].properties[4]);

  /// see [Users.isVerified]
  static final isVerified =
      QueryBooleanProperty<Users>(_entities[4].properties[5]);

  /// see [Users.passResetVerified]
  static final passResetVerified =
      QueryBooleanProperty<Users>(_entities[4].properties[6]);

  /// see [Users.userId]
  static final userId = QueryStringProperty<Users>(_entities[4].properties[7]);
}
